[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "hybrid-liquid-spiking-nn"
dynamic = ["version"]
description = "A hybrid neural network combining Liquid Neural Networks with Spiking Neural Networks"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
maintainers = [
    {name = "Your Name", email = "your.email@example.com"},
]
keywords = [
    "neural-networks",
    "liquid-neural-networks",
    "spiking-neural-networks",
    "neuromorphic-computing",
    "machine-learning",
    "pytorch",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Information Analysis",
]
requires-python = ">=3.8"
dependencies = [
    "torch>=2.0.0",
    "numpy>=1.21.0",
    "pandas>=1.3.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "scikit-learn>=1.0.0",
    "tqdm>=4.62.0",
    "rich>=10.0.0",
    "click>=8.0.0",
    "pyyaml>=6.0",
    "tensorboard>=2.8.0",
    "wandb>=0.12.0",
    "datasets>=2.0.0",
    "transformers>=4.20.0",
    "tokenizers>=0.13.0",
    "ncps>=1.0.1",
    "snntorch>=0.6.0",
    "norse>=0.0.7",
    "nir>=1.0.0",
    "nirtorch>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov>=3.0",
    "black>=21.0",
    "flake8>=3.8",
    "mypy>=0.900",
    "jupyter>=1.0",
    "ipykernel>=6.0",
    "pre-commit>=2.15",
]
gpu = [
    "torch[cuda]>=2.0.0",
]
neuromorphic = [
    "lava-loihi>=0.3",
    "intel-nrc-lib",
]
docs = [
    "sphinx>=4.0",
    "sphinx-rtd-theme>=1.0",
    "myst-parser>=0.17",
]

[project.urls]
Homepage = "https://github.com/yourusername/hybrid-liquid-spiking-nn"
Documentation = "https://github.com/yourusername/hybrid-liquid-spiking-nn/wiki"
Repository = "https://github.com/yourusername/hybrid-liquid-spiking-nn"
"Bug Tracker" = "https://github.com/yourusername/hybrid-liquid-spiking-nn/issues"

[project.scripts]
hybrid-nn = "scripts.cli:main"
hybrid-train = "train:main"

[tool.setuptools]
packages = ["src", "scripts", "tests"]

[tool.setuptools.package-dir]
"" = "."

[tool.setuptools_scm]
write_to = "src/_version.py"

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
